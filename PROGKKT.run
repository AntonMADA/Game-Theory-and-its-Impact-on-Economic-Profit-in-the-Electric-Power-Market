reset;

option solver knitro;

model PROGKKT.mod;

printf "\n-Programa binivel-\n";
#printf "\n-Lectura de datos en Excel-\n";

#Lee datos generales (Nodos y líneas)
table DatosGenerales IN "ODBC" "DATAG6.xlsx" "DatosGenerales":
[],Nnodos, Nlines, Npor;
read table DatosGenerales;

#Lee datos de costos de cada generador
table CO IN "ODBC" "DATAG6.xlsx" "CO":
[i~Nnodos],{j in 1..3} < CO[i,j] ~ (j)>;
read table CO;

#Lee la matriz Ybus
table B IN "ODBC" "DATAG6.xlsx" "B":
[i~Nnodos],{j in 1..Nnodos} < B[i,j] ~ (j)>;
read table B;

#Lee la matriz M
table M IN "ODBC" "DATAG6.xlsx" "M":
[i~Nnodos],{j in 1..Nlines} < M[i,j] ~ (j)>;
read table M;

#Lee datos de potencia min/max de cada generador en cada nodo
table Pg IN "ODBC" "DATAG6.xlsx" "Pg":
[i~Nnodos],{j in 1..2} < Pg[i,j] ~ (j)>;
read table Pg;

#Lee datos de potencia demandada en cada nodo
table Pd IN "ODBC" "DATAG6.xlsx" "Pd":
[Nnodos], Pd;
read table Pd;

#Lee datos de flujo min/max de cada linea
table FL IN "ODBC" "DATAG6.xlsx" "FL":
[i~Nlines],{j in 1..2} < FL[i,j] ~ (j)>;
read table FL;

#Lee datos de k min/max
table KL IN "ODBC" "DATAG6.xlsx" "KL":
[i~Nnodos],{j in 1..2} < KL[i,j] ~ (j)>;
read table KL;

#Lee datos de direccion de cada linea
table D IN "ODBC" "DATAG6.xlsx" "D":
[i~Nlines],{j in 1..3} < D[i,j] ~ (j)>;
read table D;

table KO IN "ODBC" "DATAG6.xlsx" "KO":
[i~Npor],{j in 1..Nnodos} < KO[i,j] ~ (j)>;
read table KO;

#printf "\n-Fin de lectura de datos de Excel-\n";

for{i in 1..221 by 1}
{
	printf "\n-con un porcentaje de- %d\n",i;
	for{j in 1..Nnodos by 1}
	{
		let K3[j]:=KO[i,j];
	}
	
	#display mukmax, mukmin, mupmin, mupmax, lambda;
	#display muflmin, muflmax, F;
	#display teta, P, K, K2;
	
	solve;
	
	
	#display mukmax, mukmin, mupmin, mupmax, lambda;
	#display muflmin, muflmax, F;
	#display teta, P, K, K2;
	#expand f;
	
	for{l in 1..Nlines by 1}  #Asignación de flujos
	{
		let Flujo[i,l]:=F[l];
	}
	
	for{k in 1..Nnodos by 1}
	{
	let PML[k]:= abs(lambda[k]);  #Asignación de PMLS
	}

	for{k in 1..Nnodos by 1}
	{
	let Ri[k]:=((PML[k]*P[k])-(CO[k,1]*P[k]^2+CO[k,2]*P[k]+CO[k,3]));  #Asignación de beneficio
	}

	let BGENCO[1]:=Ri[1]+Ri[7];
	let BGENCO[2]:=Ri[3]+Ri[4];
	let BGENCO[3]:=Ri[5]+Ri[6];

		for{k in 1..Nnodos by 1}
	{
		let PMLT[i,k]:=abs(lambda[k]);
		let Pot[i,k]:=P[k];
		let BEN[i,k]:=Ri[k]
	}
	
				
	#reset data;
	#display R1, lambda;
	reset data mukmax, mukmin, mupmin, mupmax, lambda, 
			   muflmin, muflmax, F, 
			   teta, P, K, K2, K3;
}

printf "\n-Resultados de programa binivel-\n";

#IMPRESION DE RESULTADOS EN UN ARCHIVO DE EXCEL POR ESCENARIO
#table RPOT OUT "ODBC" "DATA.xlsx" "RPOT":
#[POTENCIA], P;
#write table RPOT;

#table RPML OUT "ODBC" "DATA.xlsx" "RPML":
#[PML], R1.dual; 
#write table RPML;

#table RFL OUT "ODBC" "DATA.xlsx" "RFL":
#[FLUJOS], F;
#write table RFL;	

table RESPML OUT "ODBC" "DATAG6.xlsx" "RESPML":
[Nodo],{k in 1..221} <{i in 1..Nnodos} PMLT[k,i] ~ ("% " & k-1)>;
write table RESPML;

table RESPOT OUT "ODBC" "DATAG6.xlsx" "RESPOT":
[Nodo],{k in 1..221} <{i in 1..Nnodos} Pot[k,i] ~ ("% " & k-1)>;
write table RESPOT;

table RESFLUJO OUT "ODBC" "DATAG6.xlsx" "RESFLUJO":
[Linea],{l in 1..221} <{i in 1..Nlines} Flujo[l,i] ~ ("% " & l-1)>;
write table RESFLUJO;	

table RESBEN OUT "ODBC" "DATAG6.xlsx" "RESBEN":
[Nodo],{k in 1..221} <{i in 1..Nnodos} BEN[k,i] ~ ("% " & k-1)>;
write table RESBEN;	
printf "\n-Programa Terminado-\n";


#expand f;
#expand REP;
#expand RET;
#expand R1;#balance
#expand R2;
#expand R3;
#expand R4;
#expand R5;
#solve;

#for{i in 1..8 by 1}
#{
#let PML[i]:= abs(lambda[i]);
#}

#for{i in 1..8 by 1}
#{
#let Ri[i]:=((PML[i]*P[i])-(CO[i,1]*P[i]^2+CO[i,2]*P[i]+CO[i,3]));
#}

#let BGENCO[1]:=Ri[1]+Ri[7];
#let BGENCO[2]:=Ri[3]+Ri[4];
#let BGENCO[3]:=Ri[5]+Ri[6];


#display f;
#display P, teta, PML, K2;
#display F;
#display Ri;
#display BGENCO;